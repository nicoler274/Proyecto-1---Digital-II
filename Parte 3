//******************************************/
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Nicole Rodriguez
// 12/08/2025
// Proyecto 1 - Sensor de temperatura
// MCU: ESP32 dev kit 1.0
//******************************************/

//******************************************/
// Librerias
//******************************************/
#include <Arduino.h>
#include <stdint.h>
#include <driver/ledc.h>

//******************************************/
// Definiciones
//******************************************/
#define ledR 13 
#define ledY 12
#define ledG 27
#define but1 5
#define sensorTemp 25 // Sensor de temperatura
#define servoPin 14  //Servo

// Canales PWM (led)
#define pwmChannelR 0
#define pwmChannelY 1
#define pwmChannelG 2

// Frecuencia y resolución de PWM (led)
#define freqPWM_LED 5000
#define resPWM_LED 8 

// PWM Servo - frecuencia y resolucion
#define pwmChannelServo 3
#define freqPWM_Servo 50
#define resPWM_Servo 16

//******************************************/
// Variables globales
//******************************************/
// Anti-rebote
volatile bool flagLectura = false;
volatile unsigned long ultimaInterrupcion = 0;
const unsigned long tiempoRebote = 250; // ms

// Variables para ADC
int adcTemp;
float tempC;

// Posiciones servo
uint32_t posiciones[] = {
  1638, // 0.5 ms (posicion izquierda)
  4915, // 1.5 ms (posicion centro)
  8192  // 2.5 ms (posicion derecha)
};
uint32_t pulsoServo = posiciones[1]; // Posición inicial centro
uint32_t movServo = posiciones[1];
uint8_t pasoServo = 50;  // microsegundos por actualización
unsigned long ultimaActualizacionServo = 0;
uint8_t intervaloServo = 20; // ms

//******************************************/
// ISRs Rutinas de Interrupcion
//******************************************/
void IRAM_ATTR ISR_tomaTemp() {
  unsigned long tiempoActual = millis();
  if (tiempoActual - ultimaInterrupcion > tiempoRebote) {
    flagLectura = true;    
    ultimaInterrupcion = tiempoActual;
  }
}

//******************************************/
// Otras funciones
//******************************************/
void initPWM() {
  // LEDs
  ledcSetup(pwmChannelR, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledR, pwmChannelR);

  ledcSetup(pwmChannelY, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledY, pwmChannelY);

  ledcSetup(pwmChannelG, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledG, pwmChannelG);

  // Servo
  ledcSetup(pwmChannelServo, freqPWM_Servo, resPWM_Servo);
  ledcAttachPin(servoPin, pwmChannelServo);
  ledcWrite(pwmChannelServo, pulsoServo);
}

// Mover servo 
void moverServo() {
  if (millis() - ultimaActualizacionServo >= intervaloServo) {
    ultimaActualizacionServo = millis();
    if (pulsoServo < movServo) {
      pulsoServo += pasoServo;
      if (pulsoServo > movServo) pulsoServo = movServo;
    } else if (pulsoServo > movServo) {
      pulsoServo -= pasoServo;
      if (pulsoServo < movServo) pulsoServo = movServo;
    }
    ledcWrite(pwmChannelServo, pulsoServo);
  }
}

//******************************************/
// Configuracion
//******************************************/
void setup() {
  // Entradas
  pinMode(sensorTemp, INPUT);
  pinMode(but1, INPUT_PULLUP);
  initPWM();
  //Rutina de interrupcion
  attachInterrupt(digitalPinToInterrupt(but1), ISR_tomaTemp, FALLING);
}

//******************************************/
// Loop Principal
//******************************************/
void loop() {
moverServo();
// Lectura de temperatura
if (flagLectura) {
    flagLectura = false;

    int adcValue = analogRead(sensorTemp);   
    float voltage = adcValue * (3.3 / 4095);  
    float tempC = voltage / 0.01;         

    Serial.print("ADC: ");
    Serial.println(adcValue);
    Serial.print("Temperatura (°C): ");
    Serial.println(tempC, 2);
  
  ledcWrite(pwmChannelR, 0);
  ledcWrite(pwmChannelG, 0);
  ledcWrite(pwmChannelY, 0);

    // Selección de color según el rango
  if (tempC < 22.0) {
      ledcWrite(pwmChannelG, 255); // Verde
      movServo = posiciones[0]; // Posicion izquierda
    } 
    else if (tempC >= 22.0 && tempC < 25.0) {
      ledcWrite(pwmChannelY, 255); // Amarillo
      movServo = posiciones[1]; // Posicion centro
    } 
    else {
      ledcWrite(pwmChannelR, 255); // Rojo
      movServo = posiciones[2]; // Posicion derecha
    }
  }
}
