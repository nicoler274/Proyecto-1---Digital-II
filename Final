//******************************************/
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Nicole Rodriguez
// 12/08/2025
// Proyecto 1 - Sensor de temperatura
// MCU: ESP32 dev kit 1.0
//******************************************/

//******************************************/
// Librerias
//******************************************/
#include <Arduino.h>
#include <stdint.h>
#include <driver/ledc.h>
#include "config.h"
#include "display7.h"

//******************************************/
// Definiciones
//******************************************/
#define ledR 21
#define ledY 22
#define ledG 23
#define but1 4
#define sensorTemp 34// Sensor de temperatura
#define servoPin 13  //Servo
#define disp1 27 //Display 1
#define disp2 26 //Display 2
#define disp3 25 //Display 3
// Canales PWM (led)
#define pwmChannelR 0
#define pwmChannelY 1
#define pwmChannelG 4

// Frecuencia y resolución de PWM (led)
#define freqPWM_LED 5000
#define resPWM_LED 8 

// PWM Servo - frecuencia y resolucion
#define pwmChannelServo 3
#define freqPWM_Servo 50
#define resPWM_Servo 16

//******************************************/
// Variables globales
//******************************************/
// Anti-rebote
volatile bool flagLectura = false;
volatile unsigned long ultimaInterrupcion = 0;
const unsigned long tiempoRebote = 250; // ms

// Variables para ADC
int adcTemp;
float tempC;
float adcRAWEMA = 0;
float adcFiltrado = 0;
float alpha = 0.01;

// Posiciones servo
uint32_t posiciones[] = {
  1638, // 0.5 ms (posicion izquierda)
  4915, // 1.5 ms (posicion centro)
  8192  // 2.5 ms (posicion derecha)
};
uint32_t pulsoServo = posiciones[1]; // Posición inicial centro
uint32_t movServo = posiciones[1];
uint8_t pasoServo = 50;  // microsegundos por actualización
unsigned long ultimaActualizacionServo = 0;
uint8_t intervaloServo = 20; // ms

//Displays
hw_timer_t * timer = NULL;

volatile uint8_t dispDigits[3] = {0, 0, 0};
uint8_t cambioDisplay = 0;
const uint8_t tMux = 3;
unsigned long tPrevMux = 0;
float tempF;


//******************************************/
  // Adafruit
//******************************************/
// set up the 'counter' feed
AdafruitIO_Feed *canalTemperatura = io.feed("temperatura");

//******************************************/
// ISRs Rutinas de Interrupcion
//******************************************/
void IRAM_ATTR ISR_tomaTemp() {
  unsigned long tiempoActual = millis();
  if (tiempoActual - ultimaInterrupcion > tiempoRebote) {
    flagLectura = true;    
    ultimaInterrupcion = tiempoActual;
  }
}

//******************************************/
// Otras funciones
//******************************************/
void initPWM() {
  // LEDs
  ledcSetup(pwmChannelR, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledR, pwmChannelR);

  ledcSetup(pwmChannelY, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledY, pwmChannelY);

  ledcSetup(pwmChannelG, freqPWM_LED, resPWM_LED);
  ledcAttachPin(ledG, pwmChannelG);

  // Servo
  ledcSetup(pwmChannelServo, freqPWM_Servo, resPWM_Servo);
  ledcAttachPin(servoPin, pwmChannelServo);
  ledcWrite(pwmChannelServo, pulsoServo);
}

// Mover servo 
void moverServo() {
  if (millis() - ultimaActualizacionServo >= intervaloServo) {
    ultimaActualizacionServo = millis();
    if (pulsoServo < movServo) {
      pulsoServo += pasoServo;
      if (pulsoServo > movServo) pulsoServo = movServo;
    } else if (pulsoServo > movServo) {
      pulsoServo -= pasoServo;
      if (pulsoServo < movServo) pulsoServo = movServo;
    }
    ledcWrite(pwmChannelServo, pulsoServo);
  }
}

void getADCEMA (void){
  adcRAWEMA = analogReadMilliVolts(sensorTemp);
  adcFiltrado = alpha * adcRAWEMA + (1.0 - alpha) * adcFiltrado;
  tempF = (adcFiltrado/10) - 8;
}

void mostrarTemp(float valor){
  //Convertir los valores en unidades, decenas y decimal
  int temp = (int)(valor * 10);
  int decenas = temp / 100;
  int unidades = (temp / 10) % 10;
  int decimal = temp % 10;

  dispDigits[0] = decenas;
  dispDigits[1] = unidades;
  dispDigits[2] = decimal;
}


void IRAM_ATTR onTimer() {
  // apagar todos
  digitalWrite(disp1, LOW);
  digitalWrite(disp2, LOW);
  digitalWrite(disp3, LOW);

  // Encender el display correspondiente y mostrar su número.
  switch(cambioDisplay) {
    case 0:
      desplegarNumero(dispDigits[0]);
      desplegarPunto(0);
      digitalWrite(disp1, HIGH);
      break;
    case 1:
      desplegarNumero(dispDigits[1]);
      desplegarPunto(1);
      digitalWrite(disp2, HIGH);
      break;
    case 2:
      desplegarNumero(dispDigits[2]);
      desplegarPunto(0);
      digitalWrite(disp3, HIGH);
      break;
  }
  cambioDisplay++;
  if (cambioDisplay > 2) cambioDisplay = 0;
}

//******************************************/
// Configuracion
//******************************************/
void setup() {
Serial.begin(115200);
  
  // Configuración del Timer de Hardware
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 1000, true);
  timerAlarmEnable(timer);
  

  // Entradas
  pinMode(sensorTemp, INPUT);
  pinMode(but1, INPUT_PULLUP);

  //Funciones
  initPWM();
  configDisplay7();


  //Rutina de interrupcion
  attachInterrupt(digitalPinToInterrupt(but1), ISR_tomaTemp, FALLING);

  // Configuracion de transistores
  pinMode(disp1, OUTPUT);
  pinMode(disp2, OUTPUT);
  pinMode(disp3, OUTPUT);

  // Apagar displays 
  digitalWrite (disp1, LOW);
  digitalWrite (disp2, LOW);
  digitalWrite (disp3, LOW);

//******************************************/
  // Adafruit
//******************************************/
  Serial.print("Connecting to Adafruit IO");
  // connect to io.adafruit.com
  io.connect();

  // set up a message handler for the count feed.
  // the handleMessage function (defined below)
  // will be called whenever a message is
  // received from adafruit io.

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // we are connected
  Serial.println();
  Serial.println(io.statusText());
}

//******************************************/
// Loop Principal
//******************************************/
void loop() {
io.run();  
getADCEMA();
moverServo();
//mostrarDisplays(); // quitar toda esta funcion al hacerlo con el timer

// Lectura de temperatura
if (flagLectura) {

  flagLectura = false; 
  Serial.print("ADC RAW: ");
  Serial.print(adcRAWEMA);
  Serial.print(" - Temperatura C: ");
  Serial.println(tempF);
  
  canalTemperatura->save(tempF);

  ledcWrite(pwmChannelR, 0);
  ledcWrite(pwmChannelG, 0);
  ledcWrite(pwmChannelY, 0);

  // Selección de color según el rango
  if (tempF < 22.0) {
      ledcWrite(pwmChannelG, 255); // Verde
      movServo = posiciones[0]; // Posicion izquierda
    } 
    else if (tempF >= 22.0 && tempF < 25.0) {
      ledcWrite(pwmChannelY, 255); // Amarillo
      movServo = posiciones[1]; // Posicion centro
    } 
    else {
      ledcWrite(pwmChannelR, 255); // Rojo
      movServo = posiciones[2]; // Posicion derecha
    }
    mostrarTemp(tempF);
  }
}
